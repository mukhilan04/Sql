use film_rental;
show tables;

-- 1.	What is the total revenue generated from all rentals in the database? (2 Marks)

select sum(amount) from payment;

-- 2.	How many rentals were made in each month_name? (2 Marks)

with cte1 as(
select monthname(rental_date) month  from rental)
select distinct(month),count(month) over(partition by month) from cte1;

-- 3.	What is the rental rate of the film with the longest title in the database? (2 Marks)

select rental_rate from film order by char_length(title) desc
limit 1;

-- 4.	What is the average rental rate for films that were taken from the last 30 days from the date("2005-05-05 22:04:30")? (2 Marks)

select avg(rental_rate) avgrate from film f join inventory i using(film_id)
join rental r using(inventory_id)
where r.rental_date>=date_sub("2005-05-05 22:04:30",interval 30 day) and r.rental_date<=date_add("2005-05-05 22:04:30",interval 30 day);

-- 5.	What is the most popular category of films in terms of the number of rentals? (3 Marks)

select name from rental join inventory using(inventory_id)
 join film_category using(film_id)
join category  using( category_id) 
group by name 
order by count(*) desc limit 1;

-- 6.	Find the longest movie duration from the list of films that have not been rented by any customer. (3 Marks)

select max(length) from film
left join inventory using(film_id) 
left join rental using(inventory_id)
where inventory_id is null;

-- 7.	What is the average rental rate for films, broken down by category? (3 Marks)

select name,avg(rental_rate) from film
join film_category using(film_id)
join category using(category_id) 
group by name;

-- 8.	What is the total revenue generated from rentals for each actor in the database? (3 Marks)

select actor_id,sum(rental_rate) from film
join film_actor using(film_id) 
group by actor_id 
order by 1;

-- 9.	Show all the actresses who worked in a film having a "Wrestler" in the description. (3 Marks)

select first_name from actor
join film_actor using(actor_id)
join film using(film_id)
where description like'%wrestler%';

-- 10.	Which customers have rented the same film more than once? (3 Marks)

select distinct customer_id,first_name from customer 
join rental using(customer_id)
join inventory using(inventory_id)
group by customer_id,film_id having count(film_id) >1 order by customer_id;

-- 11.	How many films in the comedy category have a rental rate higher than the average rental rate? (3 Marks)

select count(*) from film join film_category using(film_id)
join category using(category_id)
where rental_rate>(select avg(rental_rate) from film join film_category using(film_id)
join category using(category_id) where name='comedy')
and name='comedy';

-- 12.	Which films have been rented the most by customers living in each city? (3 Marks)
with cte as
(select city,title,count(rental_id),rank() over(partition by city_id order by count(rental_id) desc) as ranks from film 
join inventory using(film_id) 
join rental using(inventory_id)
join customer using(customer_id) 
join address a using(address_id)
join city using(city_id)
group by city_id,film_id)
select * from cte
where ranks=1;

select * from city;

-- 13.	What is the total amount spent by customers whose rental payments exceed $200? (3 Marks)

select customer_id,sum(amount) as total from payment
join customer using(customer_id) 
 group by customer_id
 having total> 200;

-- 14.	Display the fields which are having foreign key constraints related to the "rental" table. [Hint: using Information_schema] (2 Marks)

select constraint_name,
column_name,
table_name from information_schema.key_column_usage
where referenced_table_name='rental';

-- 15.	Create a View for the total revenue generated by each staff member, broken down by store city with the country name. (4 Marks)

create view tot_revenue as
select staff_id,sum(amount),city,country,store_id from payment
join staff using(staff_id) 
join store s using(store_id) 
join address a on s.address_id=a.address_id 
join city using(city_id) join country using(country_id)
group by staff_id,city,country,store_id;

select * from tot_revenue;

-- 16.	Create a view based on rental information consisting of visiting_day, customer_name, the title of the film,  no_of_rental_days,
-- the amount paid by the customer along with the percentage of customer spending. (4 Marks)

create view rental_info as
select dayname(payment_date) day_name,
first_name,title,
datediff(return_date,rental_date) rental_days,amount,(amount / (SELECT SUM(amount) FROM payment) * 100) AS percentage_spending
from rental r
join customer c using(customer_id)
join inventory i using(inventory_id)
join film f using(film_id)
join payment p using(rental_id);
 
 select * from rental_info;
 
-- 17.	Display the customers who paid 50% of their total rental costs within one day. (5 Marks)

with cte1 as 
(select payment_date,customer_id,sum(amount) amt 
from payment 
group by 1,2 ),
cte2 as
(
select payment_date,customer_id, amt, sum(amt) over (partition by customer_id) total_amount 
from cte1
) 
select * from cte2 
where amt/total_amount >= 0.5 ; 